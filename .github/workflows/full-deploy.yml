name: Full Application Deployment

on:
  push:
    branches: [ main ]
    paths:
      - 'money-flow/api/**'
      - 'money-flow/web-app/**'
      - 'money-flow/terraform/**'
      - '.github/workflows/full-deploy.yml'
  workflow_dispatch:
    inputs:
      deploy_backend:
        description: 'Deploy Backend API'
        required: false
        default: 'true'
        type: boolean
      deploy_frontend:
        description: 'Deploy Frontend Web App'
        required: false
        default: 'true'
        type: boolean
      force_deploy:
        description: 'Force deployment even without changes'
        required: false
        default: 'false'
        type: boolean

env:
  PROJECT_ID: 'money-flow-469011'
  REGION: 'europe-west1'
  GAR_LOCATION: 'europe-west1'

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      backend_changed: ${{ steps.changes.outputs.backend }}
      frontend_changed: ${{ steps.changes.outputs.frontend }}
      terraform_changed: ${{ steps.changes.outputs.terraform }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 2

    - name: Check for changes
      id: changes
      run: |
        echo "Checking for file changes..."
        
        if [ "${{ github.event.inputs.force_deploy }}" = "true" ]; then
          echo "backend=true" >> $GITHUB_OUTPUT
          echo "frontend=true" >> $GITHUB_OUTPUT
          echo "terraform=true" >> $GITHUB_OUTPUT
          echo "Force deploy enabled - deploying all components"
          exit 0
        fi
        
        # Check for backend changes
        if git diff --name-only HEAD~1 HEAD | grep -E '^money-flow/api/' > /dev/null; then
          echo "backend=true" >> $GITHUB_OUTPUT
          echo "Backend changes detected"
        else
          echo "backend=false" >> $GITHUB_OUTPUT
          echo "No backend changes"
        fi
        
        # Check for frontend changes
        if git diff --name-only HEAD~1 HEAD | grep -E '^money-flow/web-app/' > /dev/null; then
          echo "frontend=true" >> $GITHUB_OUTPUT
          echo "Frontend changes detected"
        else
          echo "frontend=false" >> $GITHUB_OUTPUT
          echo "No frontend changes"
        fi
        
        # Check for terraform changes
        if git diff --name-only HEAD~1 HEAD | grep -E '^money-flow/terraform/' > /dev/null; then
          echo "terraform=true" >> $GITHUB_OUTPUT
          echo "Terraform changes detected"
        else
          echo "terraform=false" >> $GITHUB_OUTPUT
          echo "No terraform changes"
        fi

  deploy-backend:
    needs: check-changes
    if: |
      (needs.check-changes.outputs.backend_changed == 'true' && github.event.inputs.deploy_backend != 'false') ||
      (github.event.inputs.deploy_backend == 'true' && github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      id-token: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ env.PROJECT_ID }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.PROJECT_ID }}

    - name: Check CloudBuild Trigger Status
      run: |
        echo "üîç Verifying backend CloudBuild trigger (managed by Terraform)..."
        if gcloud builds triggers describe georgian-budget-backend-trigger --region=${{ env.REGION }} > /dev/null 2>&1; then
          echo "‚úÖ Backend trigger exists and ready"
          echo "TRIGGER_EXISTS=true" >> $GITHUB_ENV
        else
          echo "‚ùå Backend trigger not found - ensure Terraform has been applied"
          echo "TRIGGER_EXISTS=false" >> $GITHUB_ENV
          echo "::error::CloudBuild trigger 'georgian-budget-backend-trigger' not found. Run 'terraform apply' first."
        fi

    - name: Deploy Backend via CloudBuild Trigger
      if: env.TRIGGER_EXISTS == 'true'
      run: |
        echo "üî® Triggering Cloud Build for Backend API..."
        gcloud builds triggers run georgian-budget-backend-trigger \
          --region=${{ env.REGION }} \
          --branch=main
        echo "‚úÖ Backend CloudBuild trigger initiated"

    - name: Deploy Backend Directly
      if: env.TRIGGER_EXISTS == 'false'
      run: |
        echo "üî® Building and deploying Backend API directly..."
        
        # Submit build using the cloudbuild.yaml file
        gcloud builds submit money-flow/api/ \
          --config=money-flow/api/cloudbuild.yaml \
          --region=${{ env.REGION }} \
          --substitutions=_ARTIFACT_REGISTRY_REPO=${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/docker-repo,_ARTIFACT_REGISTRY_LOCATION=${{ env.REGION }},_CLOUD_STORAGE_BUCKET=placeholder-bucket,_DATABASE_URL=placeholder-db-url
        
        echo "‚úÖ Backend deployed directly via CloudBuild"

    - name: Verify Backend Deployment
      run: |
        echo "‚è≥ Waiting for backend deployment to complete..."
        sleep 90
        
        echo "üîç Checking backend Cloud Run service..."
        if gcloud run services describe georgian-budget-backend-api --region=${{ env.REGION }} > /dev/null 2>&1; then
          STATUS=$(gcloud run services describe georgian-budget-backend-api \
            --region=${{ env.REGION }} \
            --format="value(status.conditions[0].status)")
          
          if [ "$STATUS" = "True" ]; then
            echo "‚úÖ Backend service is running"
            SERVICE_URL=$(gcloud run services describe georgian-budget-backend-api \
              --region=${{ env.REGION }} \
              --format="value(status.url)")
            echo "üåê Backend URL: $SERVICE_URL"
          else
            echo "‚ùå Backend service is not ready"
            exit 1
          fi
        else
          echo "‚ùå Backend service not found"
          exit 1
        fi

  deploy-frontend:
    needs: [check-changes, deploy-backend]
    if: |
      always() &&
      ((needs.check-changes.outputs.frontend_changed == 'true' && github.event.inputs.deploy_frontend != 'false') ||
      (github.event.inputs.deploy_frontend == 'true' && github.event_name == 'workflow_dispatch')) &&
      (needs.deploy-backend.result == 'success' || needs.deploy-backend.result == 'skipped')
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      id-token: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ env.PROJECT_ID }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.PROJECT_ID }}

    - name: Check CloudBuild Trigger Status
      run: |
        echo "üîç Verifying frontend CloudBuild trigger (managed by Terraform)..."
        if gcloud builds triggers describe georgian-budget-frontend-trigger --region=${{ env.REGION }} > /dev/null 2>&1; then
          echo "‚úÖ Frontend trigger exists and ready"
          echo "TRIGGER_EXISTS=true" >> $GITHUB_ENV
        else
          echo "‚ùå Frontend trigger not found - ensure Terraform has been applied"
          echo "TRIGGER_EXISTS=false" >> $GITHUB_ENV
          echo "::error::CloudBuild trigger 'georgian-budget-frontend-trigger' not found. Run 'terraform apply' first."
        fi

    - name: Deploy Frontend via CloudBuild Trigger
      if: env.TRIGGER_EXISTS == 'true'
      run: |
        echo "üî® Triggering Cloud Build for Frontend Web App..."
        gcloud builds triggers run georgian-budget-frontend-trigger \
          --region=${{ env.REGION }} \
          --branch=main
        echo "‚úÖ Frontend CloudBuild trigger initiated"

    - name: Deploy Frontend Directly
      if: env.TRIGGER_EXISTS == 'false'
      run: |
        echo "üî® Building and deploying Frontend Web App directly..."
        
        # Submit build using the cloudbuild.yaml file
        gcloud builds submit money-flow/web-app/ \
          --config=money-flow/web-app/cloudbuild.yaml \
          --region=${{ env.REGION }} \
          --substitutions=_ARTIFACT_REGISTRY_REPO=${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/docker-repo,_ARTIFACT_REGISTRY_LOCATION=${{ env.REGION }}
        
        echo "‚úÖ Frontend deployed directly via CloudBuild"

    - name: Verify Frontend Deployment
      run: |
        echo "‚è≥ Waiting for frontend deployment to complete..."
        sleep 90
        
        echo "üîç Checking frontend Cloud Run service..."
        if gcloud run services describe georgian-budget-frontend --region=${{ env.REGION }} > /dev/null 2>&1; then
          STATUS=$(gcloud run services describe georgian-budget-frontend \
            --region=${{ env.REGION }} \
            --format="value(status.conditions[0].status)")
          
          if [ "$STATUS" = "True" ]; then
            echo "‚úÖ Frontend service is running"
            SERVICE_URL=$(gcloud run services describe georgian-budget-frontend \
              --region=${{ env.REGION }} \
              --format="value(status.url)")
            echo "üåê Frontend URL: $SERVICE_URL"
          else
            echo "‚ùå Frontend service is not ready"
            exit 1
          fi
        else
          echo "‚ùå Frontend service not found"
          exit 1
        fi

  deployment-summary:
    needs: [check-changes, deploy-backend, deploy-frontend]
    if: always()
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      id-token: write

    steps:
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ env.PROJECT_ID }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.PROJECT_ID }}

    - name: Get Service URLs
      run: |
        echo "üîç Getting current service status..."
        
        # Backend
        if gcloud run services describe georgian-budget-backend-api --region=${{ env.REGION }} > /dev/null 2>&1; then
          BACKEND_URL=$(gcloud run services describe georgian-budget-backend-api \
            --region=${{ env.REGION }} \
            --format="value(status.url)")
          echo "BACKEND_URL=$BACKEND_URL" >> $GITHUB_ENV
        fi
        
        # Frontend  
        if gcloud run services describe georgian-budget-frontend --region=${{ env.REGION }} > /dev/null 2>&1; then
          FRONTEND_URL=$(gcloud run services describe georgian-budget-frontend \
            --region=${{ env.REGION }} \
            --format="value(status.url)")
          echo "FRONTEND_URL=$FRONTEND_URL" >> $GITHUB_ENV
        fi
        
        # Load Balancer
        if gcloud compute url-maps list --filter="name~georgian-budget" --format="value(name)" | head -1 > /dev/null 2>&1; then
          LB_IP=$(gcloud compute addresses list --filter="name~georgian-budget" --format="value(address)" | head -1)
          if [ -n "$LB_IP" ]; then
            echo "LB_URL=https://$LB_IP" >> $GITHUB_ENV
          fi
        fi

    - name: Create Deployment Summary
      run: |
        echo "## üá¨üá™ Georgian Budget Application Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìä Deployment Status" >> $GITHUB_STEP_SUMMARY
        echo "- **Backend**: ${{ needs.deploy-backend.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Frontend**: ${{ needs.deploy-frontend.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Project**: ${{ env.PROJECT_ID }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Region**: ${{ env.REGION }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Timestamp**: $(date -u)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### üåê Service URLs" >> $GITHUB_STEP_SUMMARY
        if [ -n "$BACKEND_URL" ]; then
          echo "- **Backend API**: $BACKEND_URL" >> $GITHUB_STEP_SUMMARY
        fi
        if [ -n "$FRONTEND_URL" ]; then
          echo "- **Frontend Web App**: $FRONTEND_URL" >> $GITHUB_STEP_SUMMARY
        fi
        if [ -n "$LB_URL" ]; then
          echo "- **Load Balancer**: $LB_URL" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### üìù Changes Detected" >> $GITHUB_STEP_SUMMARY
        echo "- **Backend Changes**: ${{ needs.check-changes.outputs.backend_changed }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Frontend Changes**: ${{ needs.check-changes.outputs.frontend_changed }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Terraform Changes**: ${{ needs.check-changes.outputs.terraform_changed }}" >> $GITHUB_STEP_SUMMARY
